@page "/Downloads"
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@inject IFilesService FilesService
@inject IJSRuntime JsRuntime

<h3>Downloads</h3>

<Loader Result="@_isValid">
    <table class="table">
        <thead>
        <tr>
            <th>Filename</th>
            <th>Extension</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var fileInfo in _downloadsFilesInfos)
        {
            <tr>
                <td>
                    <input type="text" id="@($"Inp{fileInfo.Name}")" style="border:none" value="@fileInfo.Name" size="@((int)fileInfo.Name.Length*1.3)" readonly="true"><br>
                </td>
                <td>@fileInfo.Extension</td>
                <td>
                    <span id="@($"Edit{fileInfo.Name}")" class="oi oi-pencil" aria-hidden="true" style="color:green;" @onclick="() => UpdateState(fileInfo.Name)"></span>
                    <span id="@($"Save{fileInfo.Name}")" @onclick="() => RenameFile(fileInfo)" hidden="true">
                        <span class="iconify" data-icon="ion:save" style="color:green;"></span>
                    </span>
                </td>
                <td>
                    <Link Extension="@fileInfo.Extension" Href="@($"/EmbedFiles?folder=Downloads&filename={fileInfo.Name}")"/>
                </td>
                <td>
                    <a href=@($"/Downloads/{fileInfo.Name}") download=@fileInfo.Name target="_top">
                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                    </a>
                </td>
                <td>
                     <span class="oi  oi-delete" aria-hidden="true" style="color:red;" @onclick="() => OnClickDeleteButton(fileInfo)"></span>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    <p> From Internal Folder </p>
    
    <table class="table">
            <thead>
            <tr>
                <th>Filename</th>
                <th>Size</th>
                <th>Extension</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var fileInfo in _uploadsFilesInfos)
            {
                <tr>
                    <td>@fileInfo.Name</td>
                    <td>@fileInfo.Length</td>
                    <td>@fileInfo.Extension</td>
                    <td>
                        <Link Extension="@fileInfo.Extension" Href="@($"/EmbedFiles?folder=Uploads&filename={fileInfo.Name}")"/>
                    </td>
                    <td>
                        <a href=@($"/api/DownloadController/Uploads/{fileInfo.Name}") download=@fileInfo.Name target="_top">
                            <span class="oi oi-data-transfer-download" aria-hidden="true"></span>
                        </a>
                    </td>
                    <td>
                        <span class="oi  oi-delete" aria-hidden="true" style="color:red;" @onclick="() => OnClickDeleteButton(fileInfo)" ></span>
                    </td>
                </tr>
            }
            </tbody>
        </table>
</Loader>

@code {
    private IEnumerable<FileInfo> _downloadsFilesInfos;
    private IEnumerable<FileInfo> _uploadsFilesInfos;
    
    private bool? _isValid;

    protected override void OnInitialized()
    {
        LoadFiles();
        _isValid = true;
    }
    
    private async Task OnClickDownloadButton(FileSystemInfo fileInfo)
    {
        await JsRuntime.InvokeVoidAsync(
            "downloadFromUrl", $"/api/DownloadController/{fileInfo.Name}", $"{fileInfo.Name}");
    }

    private async Task OnClickDeleteButton(FileSystemInfo fileInfo)
    {
        var res = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete the file?");
        if (res == false) return;
        
        File.Delete(fileInfo.FullName);
    }
    
    private async Task RenameFile(FileSystemInfo fileInfo)
    {
        var newFileName = await JsRuntime.InvokeAsync<string>("GetInputValue", $"Inp{fileInfo.Name}");
        FilesService.RenameFile(newFileName, fileInfo.FullName);
        await UpdateState(fileInfo.Name);
        LoadFiles();
    }

    private async Task UpdateState(string filename)
    {
        await JsRuntime.InvokeVoidAsync("SetReadOnlyOnOff", $"Inp{filename}");
        await JsRuntime.InvokeVoidAsync("SetHiddenOnOff", $"Edit{filename}");
        await JsRuntime.InvokeVoidAsync("SetHiddenOnOff", $"Save{filename}");
    }

    private void LoadFiles()
    {
        _downloadsFilesInfos = FilesService.GetFilesInfo(@"wwwroot\Downloads"); 
        _uploadsFilesInfos = FilesService.GetFilesInfo(@"Uploads");
    }


}