@page "/EmbedFiles"
@using MimeTypes

@implements System.IDisposable
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFilesService FilesService
@attribute [Authorize]


<h3>@Path.GetFileNameWithoutExtension(_filename)</h3>

<div stile = "padding: 20px">
    <embed type="@_embType" src="@_path" style="height : 90vh" width="100%">
</div>

@code {

    private string _path;
    private string _embType;
    private string _filename;

    protected override void OnInitialized()
    {
        NavManager.TryGetQueryString("folder", out string folder);
        NavManager.TryGetQueryString("fileName", out _filename);
        
        var localPath = $"{folder}/{_filename}";
        
        switch (Path.GetExtension(_filename))
        {
            case ".docx":
                var fileInfo = FilesService.GetFileInfo(localPath.Replace("Downloads",@"wwwroot/Downloads"));
                var htmlFullPath = Docx2HtmlConverter.Convert(fileInfo, FilesService.TempFolder);
                _path = @$"/api/DownloadController/Temp/{Path.GetFileName(htmlFullPath)}";
                break;
            default:
                _path = folder == "Downloads" 
                    ? localPath
                    : @$"/api/DownloadController/{folder}/{_filename}";
                break;
        }
        _embType = MimeTypeMap.GetMimeType(Path.GetExtension(_path));
    }

    public void Dispose()
    {
        FilesService.DeleteTmpFolder();
    }

}